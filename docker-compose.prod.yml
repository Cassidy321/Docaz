services:
  frontend:
    container_name: frontend-prod
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "${FRONTEND_PORT}:5173"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - app-network

  backend:
    container_name: backend-prod
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html:ro
    depends_on:
      - database
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - APP_ENV=prod
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=mysql://${DB_USER}:${DB_PASSWORD}@database:${DB_PORT}/${DB_NAME}?serverVersion=8.0
      - CORS_ALLOW_ORIGIN=http://51.75.27.168

  backend-nginx:
    container_name: backend-nginx-prod
    image: nginx:alpine
    volumes:
      - ./backend:/var/www/html:ro
      - ./backend/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${BACKEND_NGINX_PORT}:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  database:
    container_name: database-prod
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - database-data-prod:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

networks:
  app-network:
    name: app-network-prod
    driver: bridge

volumes:
  database-data-prod:
